#!/usr/bin/env python
import os
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'medical_backend.settings')
django.setup()

from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType

User = get_user_model()

print("=== CONFIGURATION DES PERMISSIONS M√âDECIN ===")
print()

# R√©cup√©rer le compte m√©decin
try:
    medecin = User.objects.get(username='medecin')
    print(f"Compte trouv√©: {medecin.get_full_name()}")
    print(f"R√¥le: {medecin.role}")
    print()
except User.DoesNotExist:
    print("‚ùå Compte m√©decin non trouv√©!")
    exit()

# Supprimer toutes les permissions actuelles
medecin.user_permissions.clear()
print("‚úÖ Permissions actuelles supprim√©es")

# Modules que le m√©decin doit pouvoir g√©rer
modules_medecin = [
    ('patients', 'patient'),      # Gestion des patients
    ('documents', 'document'),    # Gestion des documents
    ('reports', 'report'),        # Gestion des rapports
    ('activities', 'activity'),   # Suivi des activit√©s (pour le dashboard)
]

# Permissions √† attribuer (seulement view, add, change - pas delete pour la s√©curit√©)
permission_types = ['view', 'add', 'change']

permissions_to_add = []

for app_label, model_name in modules_medecin:
    try:
        content_type = ContentType.objects.get(app_label=app_label, model=model_name)
        
        for perm_type in permission_types:
            try:
                perm = Permission.objects.get(
                    content_type=content_type,
                    codename=f'{perm_type}_{model_name}'
                )
                permissions_to_add.append(perm)
                print(f"‚úÖ Permission ajout√©e: {perm.codename} ({app_label}.{model_name})")
            except Permission.DoesNotExist:
                print(f"‚ö†Ô∏è  Permission {perm_type}_{model_name} non trouv√©e")
                
    except ContentType.DoesNotExist:
        print(f"‚ö†Ô∏è  Mod√®le {app_label}.{model_name} non trouv√©")

print()

# Attribuer les permissions au m√©decin
medecin.user_permissions.set(permissions_to_add)
medecin.save()

print(f"‚úÖ {len(permissions_to_add)} permissions attribu√©es au m√©decin")
print()

# Mettre √† jour les permissions personnalis√©es dans le mod√®le User
medecin.permissions = [
    'dashboard',      # Acc√®s au tableau de bord
    'patients',       # Gestion des patients
    'documents',      # Gestion des documents
    'reports',        # Gestion des rapports
    'scanner'         # Acc√®s au scanner
]
medecin.save()

print("=== PERMISSIONS PERSONNALIS√âES M√âDECIN ===")
print("Modules accessibles:")
print("  üè• Dashboard - Tableau de bord principal")
print("  üë• Patients - Gestion des dossiers patients")
print("  üìÑ Documents - Gestion des documents m√©dicaux")
print("  üìä Rapports - Gestion des rapports m√©dicaux")
print("  üîç Scanner - Scanner intelligent de documents")
print()

print("=== V√âRIFICATION DES PERMISSIONS ===")
user_permissions = medecin.user_permissions.all()
print(f"Permissions totales: {user_permissions.count()}")

for perm in user_permissions:
    print(f"  - {perm.codename} ({perm.content_type.app_label}.{perm.content_type.model})")

print()
print("=== R√âSULTAT ===")
print("Le m√©decin a maintenant acc√®s uniquement aux modules m√©dicaux!")
print("Modules accessibles: Dashboard, Patients, Documents, Rapports, Scanner")
print()
print("URL: http://127.0.0.1:8000/admin/")
print("Username: medecin")
print("Password: 123")
